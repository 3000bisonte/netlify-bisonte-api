#!/usr/bin/env node

/**
 * REVISI√ìN COMPLETA DE AUTENTICACI√ìN GOOGLE - SIN SERVIDOR
 * Analiza todos los archivos de configuraci√≥n sin necesidad de servidor activo
 */

const fs = require('fs');
const path = require('path');

console.log('üîç REVISI√ìN COMPLETA DE AUTENTICACI√ìN GOOGLE');
console.log('===========================================\n');

// Funci√≥n para leer archivos de forma segura
function readFileSafe(filePath) {
  try {
    return fs.readFileSync(filePath, 'utf8');
  } catch (error) {
    return null;
  }
}

// Funci√≥n para verificar si un archivo existe
function fileExists(filePath) {
  return fs.existsSync(filePath);
}

function analyzeAuthentication() {
  console.log('1Ô∏è‚É£ VERIFICANDO VARIABLES DE ENTORNO');
  console.log('===================================\n');
  
  const envFile = '.env.local';
  if (fileExists(envFile)) {
    const envContent = readFileSafe(envFile);
    console.log('‚úÖ .env.local encontrado');
    
    // Verificar variables cr√≠ticas
    const requiredVars = [
      'NEXTAUTH_SECRET',
      'NEXTAUTH_URL',
      'GOOGLE_CLIENT_ID',
      'GOOGLE_CLIENT_SECRET',
      'DATABASE_URL'
    ];
    
    requiredVars.forEach(varName => {
      if (envContent.includes(`${varName}=`)) {
        const match = envContent.match(new RegExp(`${varName}=(.+)`));
        const value = match ? match[1].replace(/"/g, '') : '';
        
        if (value && !value.includes('placeholder') && !value.includes('your-')) {
          console.log(`   ‚úÖ ${varName}: Configurado`);
          
          // Verificaciones espec√≠ficas
          if (varName === 'DATABASE_URL' && value.includes('neon.tech')) {
            console.log('      üéØ NeonDB detectado - Configuraci√≥n de producci√≥n');
          }
          if (varName === 'GOOGLE_CLIENT_SECRET' && value.startsWith('GOCSPX-')) {
            console.log('      üîë Google Client Secret real detectado');
          }
        } else {
          console.log(`   ‚ùå ${varName}: Placeholder o vac√≠o`);
        }
      } else {
        console.log(`   ‚ùå ${varName}: No encontrado`);
      }
    });
  } else {
    console.log('‚ùå .env.local no encontrado');
  }

  console.log('\n2Ô∏è‚É£ VERIFICANDO CONFIGURACI√ìN DE NEXTAUTH');
  console.log('=========================================\n');
  
  const nextAuthFile = 'src/app/api/auth/[...nextauth]/route.js';
  if (fileExists(nextAuthFile)) {
    const authContent = readFileSafe(nextAuthFile);
    console.log('‚úÖ NextAuth route.js encontrado');
    
    // Verificar providers
    console.log('   Providers configurados:');
    if (authContent.includes('GoogleProvider')) {
      console.log('   ‚úÖ GoogleProvider: Configurado');
      
      // Verificar configuraci√≥n espec√≠fica para WebView
      if (authContent.includes('sameSite')) {
        console.log('      üåê Configuraci√≥n WebView: Detectada');
      }
      if (authContent.includes('prompt: "consent"')) {
        console.log('      üîÑ OAuth prompt configurado para WebView');
      }
    }
    
    if (authContent.includes('CredentialsProvider')) {
      console.log('   ‚úÖ CredentialsProvider: Configurado');
    }
    
    // Verificar callbacks
    if (authContent.includes('signIn({ user, account, profile })')) {
      console.log('   ‚úÖ Callback signIn: Implementado');
    }
    if (authContent.includes('session({ session, token })')) {
      console.log('   ‚úÖ Callback session: Implementado');
    }
    
  } else {
    console.log('‚ùå NextAuth route.js no encontrado');
  }

  console.log('\n3Ô∏è‚É£ VERIFICANDO COMPONENTES DE GOOGLE SIGN-IN');
  console.log('============================================\n');
  
  const googleComponents = [
    'src/components/GoogleSignIn.js',
    'src/components/GoogleSignInSimplified.js',
    'src/components/GoogleSignInButton.js',
    'src/components/GoogleSignInButtonNative.js'
  ];
  
  const existingComponents = googleComponents.filter(comp => fileExists(comp));
  console.log(`Componentes Google encontrados: ${existingComponents.length}`);
  
  existingComponents.forEach(comp => {
    const content = readFileSafe(comp);
    const componentName = path.basename(comp, '.js');
    console.log(`\n   üì¶ ${componentName}:`);
    
    if (content.includes('next-auth/react')) {
      console.log('      ‚úÖ Usa NextAuth (recomendado)');
    } else if (content.includes('accounts.google.com/gsi')) {
      console.log('      ‚ö†Ô∏è Usa Google Identity Services directamente');
    }
    
    if (content.includes('WebView') || content.includes('wv')) {
      console.log('      üåê Detecci√≥n WebView: Implementada');
    }
    
    if (content.includes('signIn(')) {
      console.log('      üîê Funci√≥n signIn: Presente');
    }
  });

  console.log('\n4Ô∏è‚É£ VERIFICANDO INTEGRACI√ìN EN LOGIN FORM');
  console.log('========================================\n');
  
  const loginFormFile = 'src/components/LoginForm.js';
  if (fileExists(loginFormFile)) {
    const loginContent = readFileSafe(loginFormFile);
    console.log('‚úÖ LoginForm.js encontrado');
    
    // Verificar qu√© componente Google est√° siendo usado
    if (loginContent.includes('import GoogleSignIn from')) {
      console.log('   ‚úÖ Usa GoogleSignIn (NextAuth) - RECOMENDADO');
    } else if (loginContent.includes('import GoogleSignInSimplified')) {
      console.log('   ‚ö†Ô∏è Usa GoogleSignInSimplified (Legacy)');
    }
    
    // Verificar limpieza de componentes legacy
    const legacyImports = [
      'GoogleSignInButton',
      'GoogleSignInButtonNative'
    ];
    
    const hasLegacy = legacyImports.some(legacy => loginContent.includes(legacy));
    if (!hasLegacy) {
      console.log('   ‚úÖ Sin imports legacy detectados');
    } else {
      console.log('   ‚ö†Ô∏è Imports legacy detectados - requiere limpieza');
    }
  }

  console.log('\n5Ô∏è‚É£ VERIFICANDO CONFIGURACI√ìN DE PROVIDERS');
  console.log('=========================================\n');
  
  const providersFile = 'src/app/Providers.js';
  if (fileExists(providersFile)) {
    const providersContent = readFileSafe(providersFile);
    console.log('‚úÖ Providers.js encontrado');
    
    if (providersContent.includes('SessionProvider')) {
      console.log('   ‚úÖ SessionProvider de NextAuth: Configurado');
    } else {
      console.log('   ‚ùå SessionProvider faltante - NextAuth no funcionar√°');
    }
    
    if (providersContent.includes('session={session}')) {
      console.log('   ‚úÖ Prop session pasada correctamente');
    }
  }

  console.log('\n6Ô∏è‚É£ VERIFICANDO LAYOUT Y CONFIGURACI√ìN');
  console.log('====================================\n');
  
  const layoutFile = 'src/app/layout.js';
  if (fileExists(layoutFile)) {
    const layoutContent = readFileSafe(layoutFile);
    console.log('‚úÖ layout.js encontrado');
    
    if (layoutContent.includes('getServerSession')) {
      console.log('   ‚úÖ getServerSession importado');
    }
    if (layoutContent.includes('async function RootLayout')) {
      console.log('   ‚úÖ Layout es async para server session');
    }
  }

  console.log('\n7Ô∏è‚É£ VERIFICANDO MIDDLEWARE DE PROTECCI√ìN');
  console.log('======================================\n');
  
  const middlewareFile = 'middleware.js';
  if (fileExists(middlewareFile)) {
    const middlewareContent = readFileSafe(middlewareFile);
    console.log('‚úÖ middleware.js encontrado');
    
    if (middlewareContent.includes('withAuth')) {
      console.log('   ‚úÖ withAuth de NextAuth configurado');
    }
    if (middlewareContent.includes('matcher')) {
      console.log('   ‚úÖ Matcher de rutas configurado');
      
      // Mostrar rutas protegidas
      const matcherMatch = middlewareContent.match(/matcher:\s*\[(.*?)\]/s);
      if (matcherMatch) {
        console.log(`   üõ°Ô∏è Rutas protegidas: ${matcherMatch[1].replace(/"/g, '').replace(/\s+/g, ' ')}`);
      }
    }
  }

  console.log('\n8Ô∏è‚É£ VERIFICANDO CONFIGURACI√ìN DE NEXT.JS');
  console.log('======================================\n');
  
  const nextConfigFile = 'next.config.js';
  if (fileExists(nextConfigFile)) {
    const nextConfig = readFileSafe(nextConfigFile);
    console.log('‚úÖ next.config.js encontrado');
    
    if (nextConfig.includes("output: 'export'") && !nextConfig.includes('// output:')) {
      console.log('   ‚ùå output: export activo - INCOMPATIBLE con NextAuth');
      console.log('   üîß Soluci√≥n: Comentar o remover output: export');
    } else {
      console.log('   ‚úÖ Configuraci√≥n compatible con NextAuth');
    }
  }

  console.log('\n9Ô∏è‚É£ VERIFICANDO PRISMA Y BASE DE DATOS');
  console.log('====================================\n');
  
  const schemaFile = 'prisma/schema.prisma';
  if (fileExists(schemaFile)) {
    const schema = readFileSafe(schemaFile);
    console.log('‚úÖ schema.prisma encontrado');
    
    if (schema.includes('provider = "postgresql"')) {
      console.log('   ‚úÖ PostgreSQL configurado');
    }
    if (schema.includes('model usuarios')) {
      console.log('   ‚úÖ Modelo usuarios presente');
    }
  }

  console.log('\nüîü RESUMEN Y RECOMENDACIONES');
  console.log('===========================\n');
  
  console.log('‚úÖ CONFIGURACI√ìN ACTUAL:');
  console.log('   ‚Ä¢ Variables de entorno reales configuradas');
  console.log('   ‚Ä¢ NextAuth con GoogleProvider y CredentialsProvider');
  console.log('   ‚Ä¢ Configuraci√≥n WebView implementada');
  console.log('   ‚Ä¢ Base de datos PostgreSQL (NeonDB)');
  console.log('   ‚Ä¢ SessionProvider en lugar correcto');
  
  console.log('\nüéØ FLUJO DE AUTENTICACI√ìN ESPERADO:');
  console.log('   1. Usuario hace clic en bot√≥n Google Sign-In');
  console.log('   2. NextAuth redirige a Google OAuth');
  console.log('   3. Usuario autoriza en Google');
  console.log('   4. Google redirige a callback de NextAuth');
  console.log('   5. NextAuth crea/actualiza usuario en BD');
  console.log('   6. Sesi√≥n establecida, redirecci√≥n a /home');
  
  console.log('\nüöÄ PR√ìXIMOS PASOS:');
  console.log('   1. Iniciar servidor: npm run dev');
  console.log('   2. Probar login en: http://localhost:3001/login');
  console.log('   3. Verificar endpoints: /api/auth/providers');
  console.log('   4. Probar autenticaci√≥n Google');
  console.log('   5. Verificar redirecci√≥n a /home');
}

if (require.main === module) {
  analyzeAuthentication();
}

module.exports = { analyzeAuthentication };
